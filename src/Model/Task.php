<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Wrike\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wrike REST API
 *
 * Definition of the [Wrike API 3.0](https://developers.wrike.com/documentation/api/overview).
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Wrike\Client\Model;

use \ArrayAccess;

/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @package     Wrike\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'accountid' => 'string',
        'title' => 'string',
        'description' => 'string',
        'brief_description' => 'string',
        'parent_ids' => 'string[]',
        'super_parent_ids' => 'string[]',
        'shared_ids' => 'string[]',
        'responsible_ids' => 'string[]',
        'status' => 'string',
        'importance' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'dates' => '\Wrike\Client\Model\Dates',
        'scope' => 'string',
        'author_ids' => 'string[]',
        'custom_status_id' => 'string',
        'has_attachments' => 'bool',
        'attachment_count' => 'int',
        'permalink' => 'string',
        'priority' => 'string',
        'super_task_ids' => 'string[]',
        'sub_task_ids' => 'string[]',
        'dependency_ids' => 'string[]',
        'metadata' => '\Wrike\Client\Model\Metadata[]',
        'custom_fields' => '\Wrike\Client\Model\CustomField[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'accountid' => 'accountid',
        'title' => 'title',
        'description' => 'description',
        'brief_description' => 'briefDescription',
        'parent_ids' => 'parentIds',
        'super_parent_ids' => 'superParentIds',
        'shared_ids' => 'sharedIds',
        'responsible_ids' => 'responsibleIds',
        'status' => 'status',
        'importance' => 'importance',
        'created_date' => 'createdDate',
        'updated_date' => 'updatedDate',
        'dates' => 'dates',
        'scope' => 'scope',
        'author_ids' => 'authorIds',
        'custom_status_id' => 'customStatusId',
        'has_attachments' => 'hasAttachments',
        'attachment_count' => 'attachmentCount',
        'permalink' => 'permalink',
        'priority' => 'priority',
        'super_task_ids' => 'superTaskIds',
        'sub_task_ids' => 'subTaskIds',
        'dependency_ids' => 'dependencyIds',
        'metadata' => 'metadata',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'accountid' => 'setAccountid',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'brief_description' => 'setBriefDescription',
        'parent_ids' => 'setParentIds',
        'super_parent_ids' => 'setSuperParentIds',
        'shared_ids' => 'setSharedIds',
        'responsible_ids' => 'setResponsibleIds',
        'status' => 'setStatus',
        'importance' => 'setImportance',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'dates' => 'setDates',
        'scope' => 'setScope',
        'author_ids' => 'setAuthorIds',
        'custom_status_id' => 'setCustomStatusId',
        'has_attachments' => 'setHasAttachments',
        'attachment_count' => 'setAttachmentCount',
        'permalink' => 'setPermalink',
        'priority' => 'setPriority',
        'super_task_ids' => 'setSuperTaskIds',
        'sub_task_ids' => 'setSubTaskIds',
        'dependency_ids' => 'setDependencyIds',
        'metadata' => 'setMetadata',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'accountid' => 'getAccountid',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'brief_description' => 'getBriefDescription',
        'parent_ids' => 'getParentIds',
        'super_parent_ids' => 'getSuperParentIds',
        'shared_ids' => 'getSharedIds',
        'responsible_ids' => 'getResponsibleIds',
        'status' => 'getStatus',
        'importance' => 'getImportance',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'dates' => 'getDates',
        'scope' => 'getScope',
        'author_ids' => 'getAuthorIds',
        'custom_status_id' => 'getCustomStatusId',
        'has_attachments' => 'getHasAttachments',
        'attachment_count' => 'getAttachmentCount',
        'permalink' => 'getPermalink',
        'priority' => 'getPriority',
        'super_task_ids' => 'getSuperTaskIds',
        'sub_task_ids' => 'getSubTaskIds',
        'dependency_ids' => 'getDependencyIds',
        'metadata' => 'getMetadata',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accountid'] = isset($data['accountid']) ? $data['accountid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['brief_description'] = isset($data['brief_description']) ? $data['brief_description'] : null;
        $this->container['parent_ids'] = isset($data['parent_ids']) ? $data['parent_ids'] : null;
        $this->container['super_parent_ids'] = isset($data['super_parent_ids']) ? $data['super_parent_ids'] : null;
        $this->container['shared_ids'] = isset($data['shared_ids']) ? $data['shared_ids'] : null;
        $this->container['responsible_ids'] = isset($data['responsible_ids']) ? $data['responsible_ids'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['importance'] = isset($data['importance']) ? $data['importance'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['author_ids'] = isset($data['author_ids']) ? $data['author_ids'] : null;
        $this->container['custom_status_id'] = isset($data['custom_status_id']) ? $data['custom_status_id'] : null;
        $this->container['has_attachments'] = isset($data['has_attachments']) ? $data['has_attachments'] : null;
        $this->container['attachment_count'] = isset($data['attachment_count']) ? $data['attachment_count'] : null;
        $this->container['permalink'] = isset($data['permalink']) ? $data['permalink'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['super_task_ids'] = isset($data['super_task_ids']) ? $data['super_task_ids'] : null;
        $this->container['sub_task_ids'] = isset($data['sub_task_ids']) ? $data['sub_task_ids'] : null;
        $this->container['dependency_ids'] = isset($data['dependency_ids']) ? $data['dependency_ids'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accountid
     * @return string
     */
    public function getAccountid()
    {
        return $this->container['accountid'];
    }

    /**
     * Sets accountid
     * @param string $accountid
     * @return $this
     */
    public function setAccountid($accountid)
    {
        $this->container['accountid'] = $accountid;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brief_description
     * @return string
     */
    public function getBriefDescription()
    {
        return $this->container['brief_description'];
    }

    /**
     * Sets brief_description
     * @param string $brief_description
     * @return $this
     */
    public function setBriefDescription($brief_description)
    {
        $this->container['brief_description'] = $brief_description;

        return $this;
    }

    /**
     * Gets parent_ids
     * @return string[]
     */
    public function getParentIds()
    {
        return $this->container['parent_ids'];
    }

    /**
     * Sets parent_ids
     * @param string[] $parent_ids
     * @return $this
     */
    public function setParentIds($parent_ids)
    {
        $this->container['parent_ids'] = $parent_ids;

        return $this;
    }

    /**
     * Gets super_parent_ids
     * @return string[]
     */
    public function getSuperParentIds()
    {
        return $this->container['super_parent_ids'];
    }

    /**
     * Sets super_parent_ids
     * @param string[] $super_parent_ids
     * @return $this
     */
    public function setSuperParentIds($super_parent_ids)
    {
        $this->container['super_parent_ids'] = $super_parent_ids;

        return $this;
    }

    /**
     * Gets shared_ids
     * @return string[]
     */
    public function getSharedIds()
    {
        return $this->container['shared_ids'];
    }

    /**
     * Sets shared_ids
     * @param string[] $shared_ids
     * @return $this
     */
    public function setSharedIds($shared_ids)
    {
        $this->container['shared_ids'] = $shared_ids;

        return $this;
    }

    /**
     * Gets responsible_ids
     * @return string[]
     */
    public function getResponsibleIds()
    {
        return $this->container['responsible_ids'];
    }

    /**
     * Sets responsible_ids
     * @param string[] $responsible_ids
     * @return $this
     */
    public function setResponsibleIds($responsible_ids)
    {
        $this->container['responsible_ids'] = $responsible_ids;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets importance
     * @return string
     */
    public function getImportance()
    {
        return $this->container['importance'];
    }

    /**
     * Sets importance
     * @param string $importance
     * @return $this
     */
    public function setImportance($importance)
    {
        $this->container['importance'] = $importance;

        return $this;
    }

    /**
     * Gets created_date
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     * @param \DateTime $created_date
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     * @param \DateTime $updated_date
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets dates
     * @return \Wrike\Client\Model\Dates
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     * @param \Wrike\Client\Model\Dates $dates
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets scope
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets author_ids
     * @return string[]
     */
    public function getAuthorIds()
    {
        return $this->container['author_ids'];
    }

    /**
     * Sets author_ids
     * @param string[] $author_ids
     * @return $this
     */
    public function setAuthorIds($author_ids)
    {
        $this->container['author_ids'] = $author_ids;

        return $this;
    }

    /**
     * Gets custom_status_id
     * @return string
     */
    public function getCustomStatusId()
    {
        return $this->container['custom_status_id'];
    }

    /**
     * Sets custom_status_id
     * @param string $custom_status_id
     * @return $this
     */
    public function setCustomStatusId($custom_status_id)
    {
        $this->container['custom_status_id'] = $custom_status_id;

        return $this;
    }

    /**
     * Gets has_attachments
     * @return bool
     */
    public function getHasAttachments()
    {
        return $this->container['has_attachments'];
    }

    /**
     * Sets has_attachments
     * @param bool $has_attachments
     * @return $this
     */
    public function setHasAttachments($has_attachments)
    {
        $this->container['has_attachments'] = $has_attachments;

        return $this;
    }

    /**
     * Gets attachment_count
     * @return int
     */
    public function getAttachmentCount()
    {
        return $this->container['attachment_count'];
    }

    /**
     * Sets attachment_count
     * @param int $attachment_count
     * @return $this
     */
    public function setAttachmentCount($attachment_count)
    {
        $this->container['attachment_count'] = $attachment_count;

        return $this;
    }

    /**
     * Gets permalink
     * @return string
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     * @param string $permalink
     * @return $this
     */
    public function setPermalink($permalink)
    {
        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets priority
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param string $priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets super_task_ids
     * @return string[]
     */
    public function getSuperTaskIds()
    {
        return $this->container['super_task_ids'];
    }

    /**
     * Sets super_task_ids
     * @param string[] $super_task_ids
     * @return $this
     */
    public function setSuperTaskIds($super_task_ids)
    {
        $this->container['super_task_ids'] = $super_task_ids;

        return $this;
    }

    /**
     * Gets sub_task_ids
     * @return string[]
     */
    public function getSubTaskIds()
    {
        return $this->container['sub_task_ids'];
    }

    /**
     * Sets sub_task_ids
     * @param string[] $sub_task_ids
     * @return $this
     */
    public function setSubTaskIds($sub_task_ids)
    {
        $this->container['sub_task_ids'] = $sub_task_ids;

        return $this;
    }

    /**
     * Gets dependency_ids
     * @return string[]
     */
    public function getDependencyIds()
    {
        return $this->container['dependency_ids'];
    }

    /**
     * Sets dependency_ids
     * @param string[] $dependency_ids
     * @return $this
     */
    public function setDependencyIds($dependency_ids)
    {
        $this->container['dependency_ids'] = $dependency_ids;

        return $this;
    }

    /**
     * Gets metadata
     * @return \Wrike\Client\Model\Metadata[]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \Wrike\Client\Model\Metadata[] $metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Wrike\Client\Model\CustomField[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Wrike\Client\Model\CustomField[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Wrike\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Wrike\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


